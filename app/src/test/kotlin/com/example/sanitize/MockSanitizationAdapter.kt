package com.example.sanitize

import com.example.sanitize.domain.models.SensitiveWord
import com.example.sanitize.domain.models.WordError
import com.example.sanitize.domain.ports.out.ChangeSensitiveWordsPort
import com.example.sanitize.domain.ports.out.CreateSensitiveWordsPort
import com.example.sanitize.domain.ports.out.DeleteSensitiveWordsPort
import com.example.sanitize.domain.ports.out.GetSensitiveWordsPort
import com.example.sanitize.domain.requests.ChangeWordRequest
import org.springframework.context.annotation.Primary
import org.springframework.stereotype.Component

@Component
@Primary
class MockSanitizationAdapter : GetSensitiveWordsPort, CreateSensitiveWordsPort, DeleteSensitiveWordsPort, ChangeSensitiveWordsPort {

  private val _sensitiveWords = mutableListOf(
    "ACTION",
    "ADD",
    "ALL",
    "ALLOCATE",
    "ALTER",
    "ANY",
    "APPLICATION",
    "ARE",
    "AREA",
    "ASC",
    "ASSERTION",
    "ATOMIC",
    "AUTHORIZATION",
    "AVG",
    "BEGIN",
    "BY",
    "CALL",
    "CASCADE",
    "CASCADED",
    "CATALOG",
    "CHECK",
    "CLOSE",
    "COLUMN",
    "COMMIT",
    "COMPRESS",
    "CONNECT",
    "CONNECTION",
    "CONSTRAINT",
    "CONSTRAINTS",
    "CONTINUE",
    "CONVERT",
    "CORRESPONDING",
    "CREATE",
    "CROSS",
    "CURRENT",
    "CURRENT_PATH",
    "CURRENT_SCHEMA",
    "CURRENT_SCHEMAID",
    "CURRENT_USER",
    "CURRENT_USERID",
    "CURSOR",
    "DATA",
    "DEALLOCATE",
    "DECLARE",
    "DEFAULT",
    "DEFERRABLE",
    "DEFERRED",
    "DELETE",
    "DESC",
    "DESCRIBE",
    "DESCRIPTOR",
    "DETERMINISTIC",
    "DIAGNOSTICS",
    "DIRECTORY",
    "DISCONNECT",
    "DISTINCT",
    "DO",
    "DOMAIN",
    "DOUBLEATTRIBUTE",
    "DROP",
    "EACH",
    "EXCEPT",
    "EXCEPTION",
    "EXEC",
    "EXECUTE",
    "EXTERNAL",
    "FETCH",
    "FLOAT",
    "FOREIGN",
    "FOUND",
    "FULL",
    "FUNCTION",
    "GET",
    "GLOBAL",
    "GO",
    "GOTO",
    "GRANT",
    "GROUP",
    "HANDLER",
    "HAVING",
    "IDENTITY",
    "IMMEDIATE",
    "INDEX",
    "INDEXED",
    "INDICATOR",
    "INITIALLY",
    "INNER",
    "INOUT",
    "INPUT",
    "INSENSITIVE",
    "INSERT",
    "INTERSECT",
    "INTO",
    "ISOLATION",
    "JOIN",
    "KEY",
    "LANGUAGE",
    "LAST",
    "LEAVE",
    "LEVEL",
    "LOCAL",
    "LONGATTRIBUTE",
    "LOOP",
    "MODIFIES",
    "MODULE",
    "NAMES",
    "NATIONAL",
    "NATURAL",
    "NEXT",
    "NULLIF",
    "ON",
    "ONLY",
    "OPEN",
    "OPTION",
    "ORDER",
    "OUT",
    "OUTER",
    "OUTPUT",
    "OVERLAPS",
    "OWNER",
    "PARTIAL",
    "PATH",
    "PRECISION",
    "PREPARE",
    "PRESERVE",
    "PRIMARY",
    "PRIOR",
    "PRIVILEGES",
    "PROCEDURE",
    "PUBLIC",
    "READ",
    "READS",
    "REFERENCES",
    "RELATIVE",
    "REPEAT",
    "RESIGNAL",
    "RESTRICT",
    "RETURN",
    "RETURNS",
    "REVOKE",
    "ROLLBACK",
    "ROUTINE",
    "ROW",
    "ROWS",
    "SCHEMA",
    "SCROLL",
    "SECTION",
    "SELECT",
    "SEQ",
    "SEQUENCE",
    "SESSION",
    "SESSION_USER",
    "SESSION_USERID",
    "SET",
    "SIGNAL",
    "SOME",
    "SPACE",
    "SPECIFIC",
    "SQL",
    "SQLCODE",
    "SQLERROR",
    "SQLEXCEPTION",
    "SQLSTATE",
    "SQLWARNING",
    "STATEMENT",
    "STRINGATTRIBUTE",
    "SUM",
    "SYSACC",
    "SYSHGH",
    "SYSLNK",
    "SYSNIX",
    "SYSTBLDEF",
    "SYSTBLDSC",
    "SYSTBT",
    "SYSTBTATT",
    "SYSTBTDEF",
    "SYSUSR",
    "SYSTEM_USER",
    "SYSVIW",
    "SYSVIWCOL",
    "TABLE",
    "TABLETYPE",
    "TEMPORARY",
    "TRANSACTION",
    "TRANSLATE",
    "TRANSLATION",
    "TRIGGER",
    "UNDO",
    "UNION",
    "UNIQUE",
    "UNTIL",
    "UPDATE",
    "USAGE",
    "USER",
    "USING",
    "VALUE",
    "VALUES",
    "VIEW",
    "WHERE",
    "WHILE",
    "WITH",
    "WORK",
    "WRITE",
    "ALLSCHEMAS",
    "ALLTABLES",
    "ALLVIEWS",
    "ALLVIEWTEXTS",
    "ALLCOLUMNS",
    "ALLINDEXES",
    "ALLINDEXCOLS",
    "ALLUSERS",
    "ALLTBTS",
    "TABLEPRIVILEGES",
    "TBTPRIVILEGES",
    "MYSCHEMAS",
    "MYTABLES",
    "MYTBTS",
    "MYVIEWS",
    "SCHEMAVIEWS",
    "DUAL",
    "SCHEMAPRIVILEGES",
    "SCHEMATABLES",
    "STATISTICS",
    "USRTBL",
    "STRINGTABLE",
    "LONGTABLE",
    "DOUBLETABLE",
    "SELECT * FROM"
  ).mapIndexed { idx, word -> SensitiveWord(id = idx.toLong(), text = word) }.toMutableList()
  private var sensitiveWords = _sensitiveWords
    override fun getAllSensitiveWords(): Result<List<SensitiveWord>> {
    return Result.success(sensitiveWords)
  }

  override fun getSensitiveWords(wordIds: List<Long>): Result<List<SensitiveWord>> {
    return Result.success(sensitiveWords.filter { it.id in wordIds })
  }

  override fun createSensitiveWords(words: List<String>): Result<List<SensitiveWord>> {
    val numWords = sensitiveWords.size.toLong()
    val newWords = words.mapIndexed { idx, word -> SensitiveWord(id = idx + numWords, text = word) }
    sensitiveWords.addAll(newWords)
    return Result.success(newWords)
  }

  override fun deleteSensitiveWords(wordIds: List<Long>): Result<List<SensitiveWord>> {
    val words = getSensitiveWords(wordIds.toMutableList())
    sensitiveWords.removeIf { it.id in wordIds }

    return Result.success(words.getOrThrow())
  }

  override fun changeSensitiveWords(request: ChangeWordRequest): Result<SensitiveWord> {
    var newWord: SensitiveWord? = null
    sensitiveWords.replaceAll { if (it.id ==  request.wordId) it.copy(text = request.newValue).also { newWord = it } else it }
    return newWord?.let { Result.success(it) } ?: Result.failure(WordError("Word not found"))
  }

  fun resetWords() {
    sensitiveWords = _sensitiveWords.toMutableList()
  }
}