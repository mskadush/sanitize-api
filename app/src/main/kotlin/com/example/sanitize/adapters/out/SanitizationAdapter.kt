package com.example.sanitize.adapters.out

import com.example.sanitize.adapters.out.persistence.jpa.models.SensitiveWordModel
import com.example.sanitize.adapters.out.persistence.jpa.models.SensitiveWordRepository
import com.example.sanitize.domain.models.SensitiveWord
import com.example.sanitize.domain.models.WordError
import com.example.sanitize.domain.ports.out.ChangeSensitiveWordsPort
import com.example.sanitize.domain.ports.out.GetSensitiveWordsPort
import com.example.sanitize.domain.ports.out.CreateSensitiveWordsPort
import com.example.sanitize.domain.ports.out.DeleteSensitiveWordsPort
import com.example.sanitize.domain.requests.ChangeWordRequest
import org.springframework.data.repository.findByIdOrNull
import org.springframework.stereotype.Component

@Component
class SanitizationAdapter(
  private val sensitiveWordRepository: SensitiveWordRepository,
): GetSensitiveWordsPort, CreateSensitiveWordsPort, DeleteSensitiveWordsPort, ChangeSensitiveWordsPort {

  private val sensitiveWords = mutableSetOf(
    "ACTION"
    ,"ADD"
    ,"ALL"
    ,"ALLOCATE"
    ,"ALTER"
    ,"ANY"
    ,"APPLICATION"
    ,"ARE"
    ,"AREA"
    ,"ASC"
    ,"ASSERTION"
    ,"ATOMIC"
    ,"AUTHORIZATION"
    ,"AVG"
    ,"BEGIN"
    ,"BY"
    ,"CALL"
    ,"CASCADE"
    ,"CASCADED"
    ,"CATALOG"
    ,"CHECK"
    ,"CLOSE"
    ,"COLUMN"
    ,"COMMIT"
    ,"COMPRESS"
    ,"CONNECT"
    ,"CONNECTION"
    ,"CONSTRAINT"
    ,"CONSTRAINTS"
    ,"CONTINUE"
    ,"CONVERT"
    ,"CORRESPONDING"
    ,"CREATE"
    ,"CROSS"
    ,"CURRENT"
    ,"CURRENT_PATH"
    ,"CURRENT_SCHEMA"
    ,"CURRENT_SCHEMAID"
    ,"CURRENT_USER"
    ,"CURRENT_USERID"
    ,"CURSOR"
    ,"DATA"
    ,"DEALLOCATE"
    ,"DECLARE"
    ,"DEFAULT"
    ,"DEFERRABLE"
    ,"DEFERRED"
    ,"DELETE"
    ,"DESC"
    ,"DESCRIBE"
    ,"DESCRIPTOR"
    ,"DETERMINISTIC"
    ,"DIAGNOSTICS"
    ,"DIRECTORY"
    ,"DISCONNECT"
    ,"DISTINCT"
    ,"DO"
    ,"DOMAIN"
    ,"DOUBLEATTRIBUTE"
    ,"DROP"
    ,"EACH"
    ,"EXCEPT"
    ,"EXCEPTION"
    ,"EXEC"
    ,"EXECUTE"
    ,"EXTERNAL"
    ,"FETCH"
    ,"FLOAT"
    ,"FOREIGN"
    ,"FOUND"
    ,"FULL"
    ,"FUNCTION"
    ,"GET"
    ,"GLOBAL"
    ,"GO"
    ,"GOTO"
    ,"GRANT"
    ,"GROUP"
    ,"HANDLER"
    ,"HAVING"
    ,"IDENTITY"
    ,"IMMEDIATE"
    ,"INDEX"
    ,"INDEXED"
    ,"INDICATOR"
    ,"INITIALLY"
    ,"INNER"
    ,"INOUT"
    ,"INPUT"
    ,"INSENSITIVE"
    ,"INSERT"
    ,"INTERSECT"
    ,"INTO"
    ,"ISOLATION"
    ,"JOIN"
    ,"KEY"
    ,"LANGUAGE"
    ,"LAST"
    ,"LEAVE"
    ,"LEVEL"
    ,"LOCAL"
    ,"LONGATTRIBUTE"
    ,"LOOP"
    ,"MODIFIES"
    ,"MODULE"
    ,"NAMES"
    ,"NATIONAL"
    ,"NATURAL"
    ,"NEXT"
    ,"NULLIF"
    ,"ON"
    ,"ONLY"
    ,"OPEN"
    ,"OPTION"
    ,"ORDER"
    ,"OUT"
    ,"OUTER"
    ,"OUTPUT"
    ,"OVERLAPS"
    ,"OWNER"
    ,"PARTIAL"
    ,"PATH"
    ,"PRECISION"
    ,"PREPARE"
    ,"PRESERVE"
    ,"PRIMARY"
    ,"PRIOR"
    ,"PRIVILEGES"
    ,"PROCEDURE"
    ,"PUBLIC"
    ,"READ"
    ,"READS"
    ,"REFERENCES"
    ,"RELATIVE"
    ,"REPEAT"
    ,"RESIGNAL"
    ,"RESTRICT"
    ,"RETURN"
    ,"RETURNS"
    ,"REVOKE"
    ,"ROLLBACK"
    ,"ROUTINE"
    ,"ROW"
    ,"ROWS"
    ,"SCHEMA"
    ,"SCROLL"
    ,"SECTION"
    ,"SELECT"
    ,"SEQ"
    ,"SEQUENCE"
    ,"SESSION"
    ,"SESSION_USER"
    ,"SESSION_USERID"
    ,"SET"
    ,"SIGNAL"
    ,"SOME"
    ,"SPACE"
    ,"SPECIFIC"
    ,"SQL"
    ,"SQLCODE"
    ,"SQLERROR"
    ,"SQLEXCEPTION"
    ,"SQLSTATE"
    ,"SQLWARNING"
    ,"STATEMENT"
    ,"STRINGATTRIBUTE"
    ,"SUM"
    ,"SYSACC"
    ,"SYSHGH"
    ,"SYSLNK"
    ,"SYSNIX"
    ,"SYSTBLDEF"
    ,"SYSTBLDSC"
    ,"SYSTBT"
    ,"SYSTBTATT"
    ,"SYSTBTDEF"
    ,"SYSUSR"
    ,"SYSTEM_USER"
    ,"SYSVIW"
    ,"SYSVIWCOL"
    ,"TABLE"
    ,"TABLETYPE"
    ,"TEMPORARY"
    ,"TRANSACTION"
    ,"TRANSLATE"
    ,"TRANSLATION"
    ,"TRIGGER"
    ,"UNDO"
    ,"UNION"
    ,"UNIQUE"
    ,"UNTIL"
    ,"UPDATE"
    ,"USAGE"
    ,"USER"
    ,"USING"
    ,"VALUE"
    ,"VALUES"
    ,"VIEW"
    ,"WHERE"
    ,"WHILE"
    ,"WITH"
    ,"WORK"
    ,"WRITE"
    ,"ALLSCHEMAS"
    ,"ALLTABLES"
    ,"ALLVIEWS"
    ,"ALLVIEWTEXTS"
    ,"ALLCOLUMNS"
    ,"ALLINDEXES"
    ,"ALLINDEXCOLS"
    ,"ALLUSERS"
    ,"ALLTBTS"
    ,"TABLEPRIVILEGES"
    ,"TBTPRIVILEGES"
    ,"MYSCHEMAS"
    ,"MYTABLES"
    ,"MYTBTS"
    ,"MYVIEWS"
    ,"SCHEMAVIEWS"
    ,"DUAL"
    ,"SCHEMAPRIVILEGES"
    ,"SCHEMATABLES"
    ,"STATISTICS"
    ,"USRTBL"
    ,"STRINGTABLE"
    ,"LONGTABLE"
    ,"DOUBLETABLE"
    ,"SELECT * FROM"
  )

  override fun getAllSensitiveWords(): Result<List<SensitiveWord>> {
    return Result.success(sensitiveWordRepository.findAll().map { it.toSensitiveWord() })
  }

  override fun getSensitiveWords(wordIds: List<Long>): Result<List<SensitiveWord>> {
    val words = sensitiveWordRepository.findAllById(wordIds.toMutableList())
    return Result.success(words.map { it.toSensitiveWord() })
  }

  override fun createSensitiveWords(words: List<String>): Result<List<SensitiveWord>> {
    val sensitiveWordsDocuments = sensitiveWordRepository.saveAll(words.map { SensitiveWordModel(text = it) })
    return Result.success(sensitiveWordsDocuments.map { it.toSensitiveWord() })
  }

  override fun deleteSensitiveWords(wordIds: List<Long>): Result<List<SensitiveWord>> {
    val words = sensitiveWordRepository.findAllById(wordIds.toMutableList())
    sensitiveWordRepository.deleteAllById(wordIds)
    return Result.success(words.map { it.toSensitiveWord() })
  }

  override fun changeSensitiveWords(request: ChangeWordRequest): Result<SensitiveWord> {
    val currentWord = sensitiveWordRepository.findByIdOrNull(request.wordId) ?: return Result.failure(WordError("Word not found"))
    val newWord = sensitiveWordRepository.save(currentWord.copy(text = request.newValue))
    return Result.success(newWord.toSensitiveWord())
  }
}